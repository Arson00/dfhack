name: Test

on:
  workflow_call:
    inputs:
      dfhack_ref:
        type: string
      scripts_ref:
        type: string
      structures_ref:
        type: string

jobs:
  build-windows:
    name: Windows MSVC
    uses: ./.github/workflows/build-windows.yml
    with:
      dfhack_ref: ${{ inputs.dfhack_ref }}
      scripts_ref: ${{ inputs.scripts_ref }}
      structures_ref: ${{ inputs.structures_ref }}
      artifact-name: test-msvc
      cache-id: test
      tests: true

  build-linux:
    name: Linux gcc-${{ matrix.gcc }}
    uses: ./.github/workflows/build-linux.yml
    with:
      dfhack_ref: ${{ inputs.dfhack_ref }}
      scripts_ref: ${{ inputs.scripts_ref }}
      structures_ref: ${{ inputs.structures_ref }}
      artifact-name: test-gcc-${{ matrix.gcc }}
      cache-id: test
      stonesense: ${{ matrix.plugins == 'all' }}
      extras: ${{ matrix.plugins == 'all' }}
      tests: true
      gcc-ver: ${{ matrix.gcc }}
    secrets: inherit
    strategy:
      fail-fast: false
      matrix:
        include:
        - gcc: 10
          plugins: "default"
        - gcc: 12
          plugins: "all"

  test-windows:
    name: Test (Windows, MSVC, default plugins)
    needs: build-windows
    runs-on: windows-latest
    steps:
    - name: Set env
      run: echo "DF_FOLDER=DF" >> $env:GITHUB_ENV
    - name: Clone DFHack
      uses: actions/checkout@v3
      with:
        repository: 'DFHack/dfhack'
        ref: ${{ inputs.dfhack_ref }}
        sparse-checkout: |
          CMakeLists.txt
          ci/
    - name: Detect DF version
      id: get-df-version
      run: echo ver="$(sh ci/get-df-version.sh)" >> $env:GITHUB_OUTPUT
    - name: Fetch DF cache
      id: restore-df
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.DF_FOLDER }}
        key: df-windows-${{ steps.get-df-version.outputs.ver }}-${{ hashFiles('ci/download-df.sh') }}
    - name: Download DF
      if: steps.restore-df.outputs.cache-hit != 'true'
      run: sh ci/download-df.sh ${{ env.DF_FOLDER }} windows ${{ steps.get-df-version.outputs.ver }}
    - name: Save DF cache
      if: steps.restore-df.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: ${{ env.DF_FOLDER }}
        key: df-windows-${{ steps.get-df-version.outputs.ver }}-${{ hashFiles('ci/download-df.sh') }}
    - name: Download DFHack
      uses: actions/download-artifact@v3
      with:
        name: test-msvc
        path: ${{ env.DF_FOLDER }}
    - name: Run lua tests
      id: run-tests
      timeout-minutes: 10
      run: python ci/run-tests.py --keep-status "${{ env.DF_FOLDER }}"
    - name: Check RPC interface
      run: python ci/check-rpc.py "${{ env.DF_FOLDER }}/dfhack-rpc.txt"
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      continue-on-error: true
      with:
        name: test-artifacts-msvc
        path: |
          ${{ env.DF_FOLDER }}/dfhack-rpc.txt
          ${{ env.DF_FOLDER }}/test*.json
          ${{ env.DF_FOLDER }}/*.log

  test-linux:
    name: Test (Linux, GCC ${{ matrix.gcc }}, ${{ matrix.plugins }} plugins)
    needs: build-linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - gcc: 10
            plugins: "default"
          - gcc: 12
            plugins: "all"
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: test-gcc-${{ matrix.gcc }}
    # TODO: share windows test logic once there is a Linux DF build to test
